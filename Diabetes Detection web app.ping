# description: dectection of diabetes patient....
# import the libraries
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from PIL import Image
import streamlit as st
# create a title and sub title
st.write("""# Diabetes analysis.
# Diabetes dectection using the ML in python!
""")
# open and display the image
image = Image.open("C:/Users/Sagar Budhathoki/PycharmProjects/my calculator/diabities.py ")
st.image(image, caption="ML", use_column_width=True)
# get the data
df = pd.read_csv('C:/Users/Sagar Budhathoki/Downloads/diabetes_csv.csv')
# set a sub header
st.subheader('Data Information:')
# show the data as a table
st.datframe(df)
# show the statistics on the data
st.write(df.describe())
# show the data as the chart
chart=st.bar_chart(df)
#split the data into the independent 'x'and dependent 'y'variables
X = df.iloc[:,0:8].values
Y = df.iloc[:,-1].values
# split the data sets into 75% Training and 25% Testing
X_train,X_test,Y_train,y_test = train_test_split(X,Y,test_size=0.25,random_state=0)
# Get the user input feature
def get_user_input():
    preg = st.sidebar.slider('preg',0,17,3)
    plas=st.sidebar.slider('plas',0,199,117)
    pres=st.sidebar.slider('pres',0,122,72)
    skin=st.sidebar.slider('skin',0,99,23)
    insu=st.sidebar.slider('insu',0.0,846.0,30.5)
    mass=st.sidebar.slider('mass',0.0,67.1,32.0)
    pedi=st.sidebar.slider('pedi',0.078,2.42,0.3725)
    age=st.sidebar.slider('age',21,81,29)
    # store a dictionary into a variable
    user_data = {'preg':preg,
                 'plas':plas,
                 'pres':pres,
                 'skin':skin,
                 'insu':insu,
                 'mass':mass,
                 'pedi':pedi,
                 'age':age}
    # transfer the data into the data frame
    features = pd.DataFrame(user_data,index=[0])
    return features
# store the user input into the variable
user_input=get_user_input()
#set a sub header and display the users input
st.subheader('User Input:')
st.write(user_input)
#create and train the model
RandomForestClassifier=RandomForestClassifier()
RandomForestClassifier.fit(X_train,Y_train)
#show the model metrics
st.subheader('Model Test Accuracy Score:')
st.write(str(accuracy_score(Y_test,RandomForestClassifier.predict(X_test)) *100)+'%')
# store the model predictions in the variable
prediction = RandomForestClassifier.predict(user_input)
#set a subheader and display the classification
st.subheader('classification:')
st.write('prediction')



















